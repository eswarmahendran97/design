1) Attributes in webFilter(Java)
Used for passing attribute from one filter to another filter. This attributes can be passed from filter to controller as well.

Eg:
AuthenticationFilter -> Authenticates and sends User Detail as attribute
AuthorizationFilter -> Gets the User Detail from attribute and fetch the type from it and Authorizes


2) If some exception occurs, what is best way to provide the Error status to User/Another Service?
Problem_Detail(RFC_7807) Format


3) Why you don't need to add throws when throwing a RuntimeException, but you do need to add throws when throwing a custom checked exception?
Checked exceptions: These are exceptions that the compiler forces you to handle. Checked exceptions must either be caught in a try-catch block or declared in the method's throws clause. 
Unchecked exceptions (Runtime exceptions): These are exceptions that the compiler does not force you to handle. You are not required to catch them or declare them in the method's throws clause. This is because unchecked exceptions are typically used to represent programming bugs or conditions that are not expected to be handled by the caller.

When to use:
Compile time Exception:
Eg: For retying when network issue occurs
Runtime Exception: Eg: Nullpointer for user data


4) What is Basic auth format?
Key > Basic
Value -> encoding of username and password


5) Important things to note while using Webclient
    1) Uses reactor Netty server
    2) While passing query param use Map.of() to get meaning response in case of wrong input


6) WebFilter vs Exchange Filter
Web Filter -> Used for filtering incoming request. Attributes can be passed to different filter and to controller as well
Exchnage Filter -> Used for filtering when we are making API call some other service. Attributes can be passed to different filter.


7)Json Array format vs Json line format
Json Array:
[
{"name": "Alice”},
{"name": "Bob”},
{"name": "Charlie"}
]

Json line:
{"name": "Alice"}
{"name": "Bob"}
{"name": "Charlie"}

Why we need Json line format?
Unlike the JSON array format, there is no outer array. Each line represents a separate JSON object. It is well-suited for streaming applications, where data can be processed one line at a time. This is especially useful for handling large datasets that do not fit entirely in memory. Using this we don’t want load whole data into memory. 

Eg: I need to send 1000 object to a client to process it
Using application/json -> It will sent as array of object, Client need to deserialize the whole array then he will be processing it
Using application/ndjson -> It will sent json with new line format, Client can deserialize the object one by one then he will be processing it

But using Flux with application/json will can able to process data one by one

So When to use application/ndjson
If server send large chunk of dataset to process, server using application/ndjson type can process each data one by one


when using Flux in a POST or GET request with WebFlux will connection is open for long time?
Yes, indeed you can  send and receive data asynchronously, and the connection remains open for an extended period while data is being streamed. But Thread will not be blocked


8)gZip
Gzip is a widely used compression method that reduces the size of HTTP response data. 
    1) When a client (browser or application) sends an HTTP request to a server, it should include an Accept-Encoding header. 
    2) Upon receiving the request, the server checks the Accept-Encoding header to determine the client can handle compressed responses.
    3) gZip uses the DEFLATE compression method, which is a combination of Huffman coding and LZ77 compression to reduce the size of the response data and send it to client along with a Content-Encoding: gzip header.
    4) The client then decompresses the response body using the Gzip algorithm once it sees the Content-Encoding: gzip header
