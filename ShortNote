1) Attributes in webFilter(Java)
Used for passing attribute from one filter to another filter. This attributes can be passed from filter to controller as well.

Eg:
AuthenticationFilter -> Authenticates and sends User Detail as attribute
AuthorizationFilter -> Gets the User Detail from attribute and fetch the type from it and Authorizes


2) If some exception occurs, what is best way to provide the Error status to User/Another Service?
Problem_Detail(RFC_7807) Format


3) Why you don't need to add throws when throwing a RuntimeException, but you do need to add throws when throwing a custom checked exception?
Checked exceptions: These are exceptions that the compiler forces you to handle. Checked exceptions must either be caught in a try-catch block or declared in the method's throws clause. 
Unchecked exceptions (Runtime exceptions): These are exceptions that the compiler does not force you to handle. You are not required to catch them or declare them in the method's throws clause. This is because unchecked exceptions are typically used to represent programming bugs or conditions that are not expected to be handled by the caller.

When to use:
Compile time Exception:
Eg: For retying when network issue occurs
Runtime Exception: Eg: Nullpointer for user data


4) What is Basic auth format?
Key > Basic
Value -> encoding of username and password


5) Important things to note while using Webclient
    1) Uses reactor Netty server
    2) While passing query param use Map.of() to get meaning response in case of wrong input


6) WebFilter vs Exchange Filter
Web Filter -> Used for filtering incoming request. Attributes can be passed to different filter and to controller as well
Exchnage Filter -> Used for filtering when we are making API call some other service. Attributes can be passed to different filter.


7)Json Array format vs Json line format
Json Array:
[
{"name": "Alice”},
{"name": "Bob”},
{"name": "Charlie"}
]

Json line:
{"name": "Alice"}
{"name": "Bob"}
{"name": "Charlie"}

Why we need Json line format?
Unlike the JSON array format, there is no outer array. Each line represents a separate JSON object. It is well-suited for streaming applications, where data can be processed one line at a time. This is especially useful for handling large datasets that do not fit entirely in memory. Using this we don’t want load whole data into memory. 
