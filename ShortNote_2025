1) Constructor injection over @Autowired

1. When you inject object using constructor injection, the object will be final. So new threads cannot modify the fields or values of the injected object(which can be done when we inject object using @Autowired)
2. Easy for testing
3. Not a spring boot code. Its plain java code

The key advantage of constructor injection is that it enforces proper initialization and immutability, which is especially important in multi-threaded applications.


2) DNS load-balancing and Multiple Load balancers
Can Dns will return with multiple IPs when we search for a domain?
Yes, either it can be IPs of your application deployed as multiple instance or multiple load balancer IPs

Will my application have multiple load balancer instance?
Yes, Eg: Elastic load balancer (powered by AWS) will have multiple instance which can scale up and down

What DNS will do If Authoritative server returns with multiple IPs for a domain?
It will load balance Round Robin, Geo, Weighted Round Robin etc and gives a single IP to the use

The why I need separate load balancer if DNS performs load balancing task?
DNS will not make health check of your server
DNS has TTL(it will cache the server health/count information for a specific time). So it may wrongly redirect to unhealthy or scaled down server
No advance feature like rate limiting, Sticky session(same user getting routed to same server)


3) Main component of seperate GraphQl server?
const server = new ApolloServer({ typeDefs, resolvers }); //  Apollo Server is an implementation of GraphQL using Node.js
typeDefs - Schema definition (Types, Query and Mutation)
resolvers - Resolvers are the functions that actually fetch the data from API when a GraphQL query is executed

When a client makes a query, the server looks at the schema (typeDefs) and maps each requested field to a corresponding resolver function.


4) Join vs Multi Select
SELECT * FROM Order o JOIN Customer c on c.cId =  c.Id where c.id = 10 vs SELECT * FROM Order WHERE cId IN (SELECT id FROM Customer where id=10)

Joins will be more efficient because database engine typically optimizes JOIN operations. (Join is expensive operation is a Myth). Also for multiple select operation Multiple round trips to the database will be made.

When Select is better than Join
When you perform a JOIN, indexes are missing or not optimized where the database engine typically needs to match every row from one table to every row from another table, potentially creating a huge intermediate result set. This can lead to high computational overhead and large memory consumption. That case Select is better than Join

will IN query cause n+1 query issue? 
Only while using ORM (Hibernate, JPA.. etc)


AuthN and AuthZ
AuthN (authentication) and AuthZ (authorization) 
